并发编程的原则:首先要使代码正确运行,然后再提高代码的运行速度
一.线程安全性:
1.什么是线程安全性:
	当多个线程访问某个类时,这个类始终都能表现出正确的行为,那么称这个类是线程安全的.
	由于线程访问无状态对象的行为并不会影响其他线程中操作的正确性,因此无状态对象是线程安全的.
	大都数 Servlet 都是无状态的,只有当 Servlet 在处理请求时需要保存一些信息,线程安全性才会成为问题.
2.Java 线程安全的实现机制:
	(1).synchronized 关键字
	(2).volatile 变量
	(3).显式锁
	(4).原子变量
3.原子性:
	3.1.竞态条件:在并发编程中由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况
		当某个计算的正确性取决于多线程的交替执行时序时,就会产生竞态条件.
		==> 先检查后执行
		当在 Servlet 中添加一个状态变量时,可以通过线程安全的对象来管理 Servlet 的状态以维护 Servlet 的线程安全性
		如:AtomicLong count = new AtomicLong();
4.加锁机制.
	4.1.内置锁:每个Java对象都用作一个实现同步的锁,这些锁被称为内置锁或监视器锁.
		获得内置锁的唯一途径是进入由这个锁保存的同步代码块或方法.内置锁相当于互斥锁,意味着最多只有一个线程能持有这种锁
	4.2.重入:当某个线程试图获得一个已经由它自己持有的锁,那么这个请求就会成功.
		重入意味着获取锁的操作的粒度是"线程",而不是调用.
5.用锁来保护状态:
	一种常见的加锁约定:将所有的可变状态都封装在对象内部,并通过对象的内置锁对所有访问可变状态的代码
	路径进行同步,使得在该对象上不会发生并发访问.

二.对象共享:
并发编程的关键:在访问共享的可变状态时需要进行正确的管理.
1.可见性:


























