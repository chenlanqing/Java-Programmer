---------------------------
目录:
一.缓存
二.消息中间件
三.RPC
四.分布式
五.容器
---------------------------
一.缓存:
http://www.100mian.com/mianshi/dba/37381.html
1.Redis 和 Memcache 区别?
	(1).存储方式
	(2).数据支持类型
	(3).底层模型
2.mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据
二.消息中间件
三.RPC 及 RPC 框架
// https://my.oschina.net/hosee/blog/711632
1.RPC(Remote Procedure Call):远程过程调用-调用远程机器上的服务就跟调用本地服务一样.
	(1).RPC 可基于TCP和HTTP协议.Web Service 就是基于 HTTP 协议的 RPC,它具有良好的跨平台性;
		但其性能却不如基于 TCP 协议的 RPC.
	(2).直接影响 RPC 性能的两个要素:一是传输方式,二是序列化.
		一般情况下,TCP(基于传输层)比 HTTP(基于应用层)快.
		就序列化而言,Java 提供默认的序列化方式,但是在高并发环境下,会带来一些性能上的瓶颈.
		为了支持高并发,需要异步IO,即NIO
2.远程服务调用	
	2.1.RPC 调用流程:
		(1)服务消费方(client)调用以本地调用方式调用服务;
		(2)client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体;
		(3)client stub找到服务地址,并将消息发送到服务端;
		(4)server stub收到消息后进行解码;
		(5)server stub根据解码结果调用本地的服务;
		(6)本地服务执行并将结果返回给server stub;
		(7)server stub将返回结果打包成消息并发送至消费方;
		(8)client stub接收到消息,并进行解码;
		(9)服务消费方得到最终结果.
		RPC 的目标就是要2~8这些步骤都封装起来
	2.1.透明化远程服务调用:代理来实现
		(1).动态代理(优选方案)
		(2).字节码生成(字节码生成方式实现的代理更为强大和高效,但代码维护不易);
	2.2.对消息进行编码和解码:
		2.2.1.确定消息数据结构:
			客户端的请求消息结构一般需要包括以下内容
				(1).接口名称
				(2).方法名称
				(3).参数类型&参数值
				(4).超时时间
				(5).requestId,标识唯一请求ID
			服务端返回消息结构:
				(1).返回值
				(2).状态码
				(3).requestId
		2.2.2.序列化:序列化方案的选择:
			(1).通用性,比如是否支持Map等复杂的数据结构
			(2).性能,包括时间复杂度和空间复杂度.RPC 调用量大,一点时间和空间的节省,都对整个应用性能有很大提高
			(3).可扩展性,如支持新的业务字段,而不影响老的服务
			(4).跨语言性
	2.3.通信:一般RPC框架需要支持这两种IO模型:BIO 和 NIO
		RPC 通信框架一般选用成熟的框架,如 Netty,Mina 等.
		如果使用java nio方式自研,这种方式较为复杂,需要考虑的点太多
		(1).RPC 如果基于 TCP 协议开发,出现粘包怎么解决?
		(2).
	2.4.发布服务:
		可以通过 zookeeper

四.分布式:
1.项目中使用的单机服务器,如何将它部署成分布式服务器?分布式系统中如何做到session共享?
2.分布式数据的容错机制

五.容器:Docker
