1.创建多线程的方式?创建线程几种方式的不同之处
	1.1.创建线程的方式:
		(1).继承 Thread
		(2).实现 Runnable 接口
		(3).Callable:实现 Callable 接口,该接口中的call方法可以在线程执行结束时产生一个返回值
		(4).线程池创建
2.sleep() wait() yield() join()用法与区别:wait方法为什么会定义在 Object 中?
	(1).sleep:在指定时间内让当前正在执行的线程暂停执行，但不会释放"锁标志"
	(2).wait:在其他线程调用对象的notify或notifyAll方法前,导致当前线程等待.线程会释放掉它所占有的"锁标志".
		从而使别的线程有机会抢占该锁,wait,notify,notifyAll必须在同步代码块中.否则抛:IllegalMonitorStateException
	(3).yield:暂停当前正在执行的线程对象,使当前线程重新回到可执行状态,只能使同优先级或更高优先级的线程有执行的机会
	(4).join:等待该线程终止,等待调用join方法的线程结束,再继续执行
	(5).为什么要放在 Object 中?
		JAVA 提供的锁是对象级的而不是线程级的,每个对象都有锁,通过线程获得,
		如果线程需要等待某些锁那么调用对象中的 wait()方法就有意义了,
		如果 wait ()方法定义在 Thread 类中,线程正在等待的是哪个锁就不明显了;
		wait,notify和notifyAll 都是锁级别的操作,所以把他们定义在 Object 类中因为锁属于对象
3.多线程同步的原理
	(1).Java 会为每个Object对象分配一个 monitor(监视器锁),当某个对象的同步方法被多个线程调用时,该对象的 monitor 
	将负责处理这些访问的并发独占要求.
	(2).当一个线程调用一个对象的同步方法时,JVM 会检查该对象的monitor.如果monitor没有被占用,那么该线程就得到了 monitor
	的占有权,可以继续执行该对象的同步方法.如果monitor被其他线程占用,那么该线程被挂起,直到monitor释放.
	(3).当线程退出同步方法调用时,该线程会释放 monitor.其他等待线程可以获得monitor执行同步方法.
4.线程同步的实现方式?为什么会出现线程安全问题?
	4.1.多线程同步的实现方式:
		(1).synchronized 同步方法或者 synchronized 代码块;
		(2).volatile 变量,保证可见性,不保证原子性
		(3).显示锁.Lock
		(4).原子变量
	4.2.线程安全问题出现原因:

5.如何停止一个线程?Thread.setDeamon()的含义
	5.1.停止线程的方法:
		(1).自然终止,run方法执行结束后,线程自动终止;
		(2).stop 方法,已被弃用.stop 是立即终止,会导致一些数据被到处理一部分就会被终止;
		(3).使用volatile 标志位,在run()方法中使用标志位控制程序运行
		(4).使用interrupt()方法中断运行态和阻塞态线程.
			注意使用interrupt()方法中断正在运行中的线程只会修改中断状态位,可以通过isInterrupted()判断
6.解释是一下什么是线程安全?举例说明一个线程不安全的例子
	6.1.线程安全性:当多个线程访问某个类时,这个类始终都表现出正确的行为,那么称这个类是线程安全的;
		由于线程访问无状态对象的行为并不会影响其他线程中操作的正确性,因此无状态对象是线程安全的.
		大都数 Servlet 都是无状态的.只有当 Servlet 在处理请求时需要保存一些信息时,线程安全才会称为问题
7.什么是线程池?如果让你设计一个线程池,如何设计,应该有哪些方法?
8.volatile 关键字如何保证内存可见性:
9.synchronized 与 Lock 的区别
10.synchronized 用在代码块和方法上有什么区别? 底层是如何实现的?
	偏向锁、轻量级锁、自旋锁、重量级锁,锁的膨胀模型,以及锁的优化原理,为什么要这样设计
11.线程间如何通信?
12.生产者消费者模式的几种实现
13.阻塞队列实现
14.ThreadLocal 的设计理念与作用,ThreadPool 用法与优势
15.Executors 创建的三种(JAVA8增加了一种，共四种)线程池的特点及适用范围
16.Concurrent 包,java.util.concurrent 包下用过哪些类
17.乐观锁与悲观锁:乐观锁的设计要点和使用方法
18.锁的等级:方法锁、对象锁、类锁	
19.如果想实现所有的线程一起等待某个事件的发生,当某个事件发生时,所有线程一起开始往下执行的话,
	有什么好的办法吗?
	CyclicBarrier 实现原理
20.CAS、AQS
21.锁的优化策略
	① 读写分离
	② 分段加锁
	③ 减少锁持有的时间
	④ 多个线程尽量以相同的顺序去获取资源 
22.何为幂等性控制? 举例说明如何实现幂等性
23.线程间通信方式?
24.分布式锁?
25.简述线程的生命周期
